class Bank{
    string name;
    string bankCode;
    Address address;
    List<ATM> atm;

    public string getBankCode();
    public bool addATM();
}

class BankService{
    virutal public bool isValidUser(Card card, string pin);
    virtual public Account getCustomerDetails(Card card);
    virtual public TransactionDetail executeTransaction(Transaction transaction, Account account);
}

class BankA : public BankService{
     public bool isValidUser(Card card, string pin);
     public Account getCustomerDetails(Card card);
     public TransactionDetail executeTransaction(Transaction transaction, Account account);
}

class BankB: public BankService{
     public bool isValidUser(Card card, string pin);
     public Account getCustomerDetails(Card card);
     public TransactionDetail executeTransaction(Transaction transaction, Account account);
}


class Address{
    string street;
    string city;
    string state;
    string country;
    string zipcode;
}

class ATM{
    int atmId;
    Address address;
    Keypad keypad;
    Screen screen;
    CardReader cardReader;
    CashDispenser cashDispenser;
    DepositSlot depositSlot;
    List<Transaction> transactions;
    BankService bankService;

    public bool authenticateUser(Account);
    public List<Transaction> getAllTransactions();
    public bool initiateTransaction(Account);
    public BankService getBankService(CardReader);
}

class Keypad{
    public void getInput(string);
}

class Screen{
    public bool showMessage(string message);    
}

class CardReader{
    public Card readCard();
}

enum CashType{
    HUNDRED, FIVE_HUNDRED, TWO_THOUSAND
}

class Cash{
    CashType cashType;
    string serialNumber;
}

class CashDispenser{
    map<CashType, List<Cash>> cashAvailable;  

    public int dispenseCash(int amount);
    public bool validate(int amount);
}


classs DepositSlot{
    public bool receiveAmount(int);
}

enum AccountType { SAVINGS_ACC, CURRENT_ACC, OTHER }

enum CustomerStatus { ACTIVE, BLOCKED, INACTIVE, OTHER }

class Customer{
    string firstName;
    string lastName;
    Card card;
    Account account;
    BankService bankService;
    CustomerStatus status;
}


class Account{
    int accountNumber;       
    double availableBalance;
    List<Transaction> transactions;    
    AccountType accountType;
   
    public double getAvailableBalance();
    public Transaction makeTransaction();
    public bool addTransaction();
}

class Card{
    int cardId;
    string cardNumber;
    int cvv;
    Date dob;
    Date cardExpiry;
    double withdrawlLimit;

    virtual public int getCVV() = 0;
    virtual public bool validateCvv() = 0;
}

class CreditCard: public Card{            
    string name;
}

class DebitCard : public Card{            
    string name;
}

enum TransactionStatus { SUCCESS, FAILURE, BLOCKED, OHTER }

class Transaction{
    int transactionId;
    ATM atm;
    int accountId;
    TransactionStatus transactionStatus;
    Date createdAt;

    public bool saveTransaction(int);
}


class BalanceInquiry: public Transaction{    
    public double showAmount();    
}

class Withdrawl: public Transaction {
    public double getAmount();
}

class Transfer: public Transaction{
    Account destinationAcc;
    Account sourceAcc;
    double amount;
}

class Deposit: public Transaction{
    public bool updateAmount(double);
    public double getAmount();
}




